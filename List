#include<stdio.h>
#include<stdlib.h>

typedef struct //struct of node
{
	int data;
	struct Node* next;
}Node;

Node* CreateNode(int data)
{
	Node* ptr = (Node*)malloc(sizeof(Node));

	if(ptr == NULL) exit(1);
	else
	{
		ptr->data = data;
		ptr->next = NULL;
	}
	return ptr;
}
void PrintList(Node* First)//列印list
{
	while(First!=NULL) //traversal
	{
		printf("%d ",First->data);
		First = First->next;
	}
	printf("\n");
}
Node* AddNode(Node* list,int data)
{
	Node* newNode = (Node*)malloc(sizeof(Node));
 	newNode->data = data;
 	newNode->next = NULL;
	Node* a = list;
	while(a->next!=NULL)
	{
		a = a->next;
	}//traverse to last node;
	a->next = newNode; //insert new node
	return list;
}

Node* AddNodeTop(Node* list,int data)
{
	Node* newNode = (Node*)malloc(sizeof(Node));
 	newNode->data = data;
	newNode->next = list;
	list = newNode;
	return list;
}

Node* ReverseList(Node* list) //Reverse
{
	Node* prev;
	Node* curr;
	Node* prec;
	prev = NULL;
	curr = list;
	prec = list->next;

	while(prec!=NULL) //traversal and reverse links
	{
		curr->next = prev; // (prev)->(curr)->(prec)
		prev = curr;
		curr = prec;
		prec = prec->next;
	}
	curr->next = prev;
	list = curr; //last node is new top
	return list;
}


int main()
{
	Node* a = CreateNode(100);
	a = AddNode(a,200);
	a = AddNode(a,300);
	a = AddNodeTop(a,400);
	PrintList(a);
	a = ReverseList(a);
	PrintList(a);

	return 0;
};


















